#!/usr/bin/env node

'use strict';

var _exec = require('exec-sh');
var scanner = require('../lib/macwatch');
var program = require('commander');
var pck = require('../package.json');

function list(val) {
    return val.split(',');
}

function onError(err) {
    console.error('-------- ERROR ------');
    console.error(err);
    console.error(err.message);
    process.exit(1);
}

function onStateChanged(data) {
    if (typeof program.execCmd === 'string') {
        _exec(program.execCmd);
        return;
    }
    process.stdout.write("Result: " + JSON.stringify(data, null, 4) + ' \r');
}

program
    .version(pck.version)
    .option('-m, --mac-address <address>', 'MAC address to watch for', list)
    .option('-e, --exec-cmd <command>',
        'Command to execute on state transition')
    .option('-i, --interval [milliseconds]', 'Interval between scans', 100)
    .option('-I, --interface [interface]', 'Interface to watch MAC', 'wlan0')
    .option('-g, --gone-after [minutes]',
        'Period of time after which a MAC is considered as not present anymore',
        5)
    .parse(process.argv);

var mac = program.macAddress;
var interval = program.interval;
var goneAfter = program.goneAfter * 60 * 1000;
var command = program.execCmd;


if (!mac) {
    program.help();
}

scanner({
    mac: mac,
    interval: interval,
    goneAfter: goneAfter,
    interface: program.interface,
    command: onStateChanged,
    onError: onError
});
